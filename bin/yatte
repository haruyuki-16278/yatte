#!/bin/sh

#################### variables ####################
# shellcheck disable=SC2034
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[37m'
RESET='\033[0m'

#################### functions ####################
parse_args() {
  for arg in "$@"; do
    case "$arg" in
      --help|-h)
# shellcheck disable=SC2116
        cat << EOF
$(echo "${CYAN}yatte${RESET}") is a tool to run tasks defined in yatte.yml

Usage:
  - $(echo "${CYAN}yatte${RESET}") <task-name>
    run the task defined in yatte.yml

  - $(echo "${CYAN}yatte${RESET}") --help
  - $(echo "${CYAN}yatte${RESET}") -h
    show this help

  - $(echo "${CYAN}yatte${RESET}") --here <task-name>
    run the task defined in yatte.yml in the current directory

Define tasks:
  - commands
    command can written like below
    ---yatte.yml
    hello: "echo 'hello world'"
    ---

  - args
    $(echo "${CYAN}yatte${RESET}") can understand these command-args
    - \$1, \$2, ...
      this will be the args passed to the command
    - \$yatte_arg_<key> is a arg
      this will be the passed values like --<key>=<value>

    ---yatte.yml
    calc: "echo \$1 + \$2"
    callme: "echo \$yatte_arg_me"
    ---
EOF
        exit 0
        ;;
      --here)
        HERE=true
        ;;
      --*)
        key=$(echo "$arg" | sed 's/^--//' | sed 's/=.*//')
        if echo "$arg" | grep -q "="; then
          value=$(echo "$arg" | sed 's/^--.*=//')
        else
          value=true
        fi
        eval "yatte_arg_$key"=\$value
        ;;
    esac
  done
}

get_yaml_value() {
  task_list=$(awk -F: '/^[a-zA-Z0-9_-]+:/ {printf "%s:%s, ", $1, NR}' yatte.yml)
  key=$1
  val=$(grep "^$key:" yatte.yml | sed "s/^$key: //")
  if [ "$val" = "|" ]; then
    from=$(($(echo "$task_list" | sed "s/^.*$key://" | sed "s/,.*//") + 1))
    to=$(($(echo "$task_list" | sed "s/^.*$key:[0-9]\+,//" | sed "s/, .*//" | sed "s/^.*://") - 1))
    task=$(sed -n "${from},${to}p" yatte.yml | sed ':a;N;$!ba;s/\\\n/ /g;s/\n/ \&\& /g' | sed "s/ \{2,\}/ /g" | sed "s/^ *//")
    echo "$task"
  elif [ "$val" = "" ]; then
    echo "${RED}ERROR:${RESET} $key is not defined"
    exit 1
  else
    echo "$val"
  fi
}

#################### main ####################
parse_args "$@"

# chdir to git project root directory
if [ ! "$HERE" ]; then
  cd "$(git rev-parse --show-toplevel)" || echo "run in $(pwd)"
fi
# check yatte.yml is exist
if [ ! -f yatte.yml ]; then
  echo "${RED}ERROR:${RESET} $(pwd)/yatte.yml not found"
  exit 1
fi
# load .env if .env is available
if [ -f .env ]; then
  . ./.env
fi

# get task name
task_name=""
for arg in "$@"; do
  # 引数が -- または - で始まらない場合
  if [ "${arg#--}" = "$arg" ] && [ "${arg#-}" = "$arg" ]; then
    task_name="$arg"
    break
  fi
done

# get target task
target_task=$(get_yaml_value "$task_name")

# run target task
echo "${GREEN}RUN:${RESET} $target_task"
eval "$target_task"
